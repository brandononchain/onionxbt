import {
  v4_default
} from "./chunk-LULPWKZI.js";
import {
  require_bs58
} from "./chunk-GEDLOCD2.js";
import {
  SolanaSignAndSendTransaction,
  SolanaSignMessage,
  SolanaSignTransaction
} from "./chunk-42XXHGZT.js";
import {
  PublicKey,
  Transaction,
  VersionedTransaction,
  init_index_browser_esm
} from "./chunk-NZSXK4RG.js";
import {
  __commonJS,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@solflare-wallet/metamask-sdk/node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/@solflare-wallet/metamask-sdk/node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__) prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0) return names;
      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter2;
    }
  }
});

// node_modules/@solflare-wallet/metamask-sdk/lib/esm/index.js
init_index_browser_esm();

// node_modules/@solflare-wallet/metamask-sdk/node_modules/eventemitter3/index.mjs
var import_index = __toESM(require_eventemitter3(), 1);
var eventemitter3_default = import_index.default;

// node_modules/@solflare-wallet/metamask-sdk/lib/esm/index.js
var import_bs58 = __toESM(require_bs58());

// node_modules/@solflare-wallet/metamask-sdk/lib/esm/utils.js
function isLegacyTransactionInstance(transaction) {
  return transaction.version === void 0;
}
function serializeTransaction(transaction) {
  return isLegacyTransactionInstance(transaction) ? transaction.serialize({
    verifySignatures: false,
    requireAllSignatures: false
  }) : transaction.serialize();
}

// node_modules/@solflare-wallet/metamask-sdk/lib/esm/detectProvider.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function isSnapSupported(provider) {
  return __awaiter(this, void 0, void 0, function* () {
    try {
      yield provider.request({ method: "wallet_getSnaps" });
      return true;
    } catch (error) {
      return false;
    }
  });
}
function detectProvider() {
  return __awaiter(this, void 0, void 0, function* () {
    try {
      const provider = window.ethereum;
      if (!provider) {
        return null;
      }
      if (provider.providers && Array.isArray(provider.providers)) {
        const providers = provider.providers;
        for (const provider2 of providers) {
          if (yield isSnapSupported(provider2)) {
            return provider2;
          }
        }
      }
      if (provider.detected && Array.isArray(provider.detected)) {
        const providers = provider.detected;
        for (const provider2 of providers) {
          if (yield isSnapSupported(provider2)) {
            return provider2;
          }
        }
      }
      if (yield isSnapSupported(provider)) {
        return provider;
      }
      return null;
    } catch (error) {
      console.error(error);
      return null;
    }
  });
}

// node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/solana.js
var SOLANA_MAINNET_CHAIN = "solana:mainnet";
var SOLANA_DEVNET_CHAIN = "solana:devnet";
var SOLANA_TESTNET_CHAIN = "solana:testnet";
var SOLANA_LOCALNET_CHAIN = "solana:localnet";
var SOLANA_CHAINS = [
  SOLANA_MAINNET_CHAIN,
  SOLANA_DEVNET_CHAIN,
  SOLANA_TESTNET_CHAIN,
  SOLANA_LOCALNET_CHAIN
];
function isSolanaChain(chain) {
  return SOLANA_CHAINS.includes(chain);
}

// node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/account.js
var __classPrivateFieldGet = function(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = function(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _StandardSolflareMetaMaskWalletAccount_address;
var _StandardSolflareMetaMaskWalletAccount_publicKey;
var _StandardSolflareMetaMaskWalletAccount_chains;
var _StandardSolflareMetaMaskWalletAccount_features;
var _StandardSolflareMetaMaskWalletAccount_label;
var _StandardSolflareMetaMaskWalletAccount_icon;
var chains = SOLANA_CHAINS;
var features = [SolanaSignAndSendTransaction, SolanaSignTransaction, SolanaSignMessage];
var StandardSolflareMetaMaskWalletAccount = class _StandardSolflareMetaMaskWalletAccount {
  get address() {
    return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_address, "f");
  }
  get publicKey() {
    return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_publicKey, "f").slice();
  }
  get chains() {
    return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_chains, "f").slice();
  }
  get features() {
    return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_features, "f").slice();
  }
  get label() {
    return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_label, "f");
  }
  get icon() {
    return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_icon, "f");
  }
  constructor({ address, publicKey, label, icon }) {
    _StandardSolflareMetaMaskWalletAccount_address.set(this, void 0);
    _StandardSolflareMetaMaskWalletAccount_publicKey.set(this, void 0);
    _StandardSolflareMetaMaskWalletAccount_chains.set(this, void 0);
    _StandardSolflareMetaMaskWalletAccount_features.set(this, void 0);
    _StandardSolflareMetaMaskWalletAccount_label.set(this, void 0);
    _StandardSolflareMetaMaskWalletAccount_icon.set(this, void 0);
    if (new.target === _StandardSolflareMetaMaskWalletAccount) {
      Object.freeze(this);
    }
    __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_address, address, "f");
    __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_publicKey, publicKey, "f");
    __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_chains, chains, "f");
    __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_features, features, "f");
    __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_label, label, "f");
    __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_icon, icon, "f");
  }
};
_StandardSolflareMetaMaskWalletAccount_address = /* @__PURE__ */ new WeakMap(), _StandardSolflareMetaMaskWalletAccount_publicKey = /* @__PURE__ */ new WeakMap(), _StandardSolflareMetaMaskWalletAccount_chains = /* @__PURE__ */ new WeakMap(), _StandardSolflareMetaMaskWalletAccount_features = /* @__PURE__ */ new WeakMap(), _StandardSolflareMetaMaskWalletAccount_label = /* @__PURE__ */ new WeakMap(), _StandardSolflareMetaMaskWalletAccount_icon = /* @__PURE__ */ new WeakMap();

// node_modules/@solflare-wallet/metamask-sdk/lib/esm/index.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var SolflareMetaMask = class _SolflareMetaMask extends eventemitter3_default {
  constructor(config) {
    super();
    this._network = "mainnet-beta";
    this._iframeParams = {};
    this._element = null;
    this._iframe = null;
    this._publicKey = null;
    this._account = null;
    this._isConnected = false;
    this._connectHandler = null;
    this._messageHandlers = {};
    this._handleEvent = (event) => {
      var _a, _b;
      switch (event.type) {
        case "connect": {
          this._collapseIframe();
          if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.publicKey) {
            this._publicKey = event.data.publicKey;
            this._isConnected = true;
            if (this._connectHandler) {
              this._connectHandler.resolve();
              this._connectHandler = null;
            }
            this._connected();
          } else {
            if (this._connectHandler) {
              this._connectHandler.reject();
              this._connectHandler = null;
            }
            this._disconnected();
          }
          return;
        }
        case "disconnect": {
          if (this._connectHandler) {
            this._connectHandler.reject();
            this._connectHandler = null;
          }
          this._disconnected();
          return;
        }
        case "accountChanged": {
          if ((_b = event.data) === null || _b === void 0 ? void 0 : _b.publicKey) {
            this._publicKey = event.data.publicKey;
            this.emit("accountChanged", this.publicKey);
            this._standardConnected();
          } else {
            this.emit("accountChanged", void 0);
            this._standardDisconnected();
          }
          return;
        }
        default: {
          return;
        }
      }
    };
    this._handleResize = (data) => {
      if (data.resizeMode === "full") {
        if (data.params.mode === "fullscreen") {
          this._expandIframe();
        } else if (data.params.mode === "hide") {
          this._collapseIframe();
        }
      } else if (data.resizeMode === "coordinates") {
        this._resizeIframe(data.params);
      }
    };
    this._handleMessage = (event) => {
      var _a;
      if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.channel) !== "solflareIframeToWalletAdapter") {
        return;
      }
      const data = event.data.data || {};
      if (data.type === "event") {
        this._handleEvent(data.event);
      } else if (data.type === "resize") {
        this._handleResize(data);
      } else if (data.type === "response") {
        if (this._messageHandlers[data.id]) {
          const { resolve, reject } = this._messageHandlers[data.id];
          delete this._messageHandlers[data.id];
          if (data.error) {
            reject(data.error);
          } else {
            resolve(data.result);
          }
        }
      }
    };
    this._removeElement = () => {
      if (this._element) {
        this._element.remove();
        this._element = null;
      }
    };
    this._removeDanglingElements = () => {
      const elements = document.getElementsByClassName("solflare-metamask-wallet-adapter-iframe");
      for (const element of elements) {
        if (element.parentElement) {
          element.remove();
        }
      }
    };
    this._injectElement = () => {
      this._removeElement();
      this._removeDanglingElements();
      const params = Object.assign(Object.assign({}, this._iframeParams), { mm: true, v: 1, cluster: this._network || "mainnet-beta", origin: window.location.origin || "", title: document.title || "" });
      const queryString = Object.keys(params).map((key) => `${key}=${encodeURIComponent(params[key])}`).join("&");
      const iframeUrl = `${_SolflareMetaMask.IFRAME_URL}?${queryString}`;
      this._element = document.createElement("div");
      this._element.className = "solflare-metamask-wallet-adapter-iframe";
      this._element.innerHTML = `
      <iframe src='${iframeUrl}' style='position: fixed; top: 0; bottom: 0; left: 0; right: 0; width: 100%; height: 100%; border: none; border-radius: 0; z-index: 99999; color-scheme: auto;' allowtransparency='true'></iframe>
    `;
      document.body.appendChild(this._element);
      this._iframe = this._element.querySelector("iframe");
      window.addEventListener("message", this._handleMessage, false);
    };
    this._collapseIframe = () => {
      if (this._iframe) {
        this._iframe.style.top = "";
        this._iframe.style.right = "";
        this._iframe.style.height = "2px";
        this._iframe.style.width = "2px";
      }
    };
    this._expandIframe = () => {
      if (this._iframe) {
        this._iframe.style.top = "0px";
        this._iframe.style.bottom = "0px";
        this._iframe.style.left = "0px";
        this._iframe.style.right = "0px";
        this._iframe.style.width = "100%";
        this._iframe.style.height = "100%";
      }
    };
    this._resizeIframe = (params) => {
      if (!this._iframe) {
        return;
      }
      this._iframe.style.top = isFinite(params.top) ? `${params.top}px` : "";
      this._iframe.style.bottom = isFinite(params.bottom) ? `${params.bottom}px` : "";
      this._iframe.style.left = isFinite(params.left) ? `${params.left}px` : "";
      this._iframe.style.right = isFinite(params.right) ? `${params.right}px` : "";
      this._iframe.style.width = isFinite(params.width) ? `${params.width}px` : params.width;
      this._iframe.style.height = isFinite(params.height) ? `${params.height}px` : params.height;
    };
    this._sendIframeMessage = (data) => {
      if (!this.connected || !this.publicKey) {
        throw new Error("Wallet not connected");
      }
      return new Promise((resolve, reject) => {
        var _a, _b;
        const messageId = v4_default();
        this._messageHandlers[messageId] = { resolve, reject };
        (_b = (_a = this._iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({
          channel: "solflareWalletAdapterToIframe",
          data: Object.assign({ id: messageId }, data)
        }, "*");
      });
    };
    this._connected = () => {
      this._isConnected = true;
      this.emit("connect", this.publicKey);
      this._standardConnected();
    };
    this._disconnected = () => {
      this._publicKey = null;
      this._isConnected = false;
      window.removeEventListener("message", this._handleMessage, false);
      this._removeElement();
      this.emit("disconnect");
      this._standardDisconnected();
    };
    this._standardConnected = () => {
      if (!this.publicKey) {
        return;
      }
      const address = this.publicKey.toString();
      if (!this._account || this._account.address !== address) {
        this._account = new StandardSolflareMetaMaskWalletAccount({
          address,
          publicKey: this.publicKey.toBytes()
        });
        this.emit("standard_change", { accounts: this.standardAccounts });
      }
    };
    this._standardDisconnected = () => {
      if (this._account) {
        this._account = null;
        this.emit("standard_change", { accounts: this.standardAccounts });
      }
    };
    if (config === null || config === void 0 ? void 0 : config.network) {
      this._network = config === null || config === void 0 ? void 0 : config.network;
    }
    if (window.SolflareMetaMaskParams) {
      this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), window.SolflareMetaMaskParams);
    }
    if (config === null || config === void 0 ? void 0 : config.params) {
      this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), config === null || config === void 0 ? void 0 : config.params);
    }
  }
  get publicKey() {
    return this._publicKey ? new PublicKey(this._publicKey) : null;
  }
  get standardAccount() {
    return this._account;
  }
  get standardAccounts() {
    return this._account ? [this._account] : [];
  }
  get isConnected() {
    return this._isConnected;
  }
  get connected() {
    return this.isConnected;
  }
  get autoApprove() {
    return false;
  }
  connect() {
    return __awaiter2(this, void 0, void 0, function* () {
      if (this.connected) {
        return;
      }
      this._injectElement();
      yield new Promise((resolve, reject) => {
        this._connectHandler = { resolve, reject };
      });
    });
  }
  disconnect() {
    return __awaiter2(this, void 0, void 0, function* () {
      yield this._sendIframeMessage({
        method: "disconnect"
      });
      this._disconnected();
    });
  }
  signTransaction(transaction) {
    var _a;
    return __awaiter2(this, void 0, void 0, function* () {
      if (!this.connected || !this.publicKey) {
        throw new Error("Wallet not connected");
      }
      try {
        const serializedTransaction = serializeTransaction(transaction);
        const response = yield this._sendIframeMessage({
          method: "signTransactionV2",
          params: {
            transaction: import_bs58.default.encode(serializedTransaction)
          }
        });
        const { transaction: signedTransaction } = response;
        return isLegacyTransactionInstance(transaction) ? Transaction.from(import_bs58.default.decode(signedTransaction)) : VersionedTransaction.deserialize(import_bs58.default.decode(signedTransaction));
      } catch (e) {
        throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || "Failed to sign transaction");
      }
    });
  }
  signAllTransactions(transactions) {
    var _a;
    return __awaiter2(this, void 0, void 0, function* () {
      if (!this.connected || !this.publicKey) {
        throw new Error("Wallet not connected");
      }
      try {
        const serializedTransactions = transactions.map((transaction) => serializeTransaction(transaction));
        const { transactions: signedTransactions } = yield this._sendIframeMessage({
          method: "signAllTransactionsV2",
          params: {
            transactions: serializedTransactions.map((transaction) => import_bs58.default.encode(transaction))
          }
        });
        return signedTransactions.map((signedTransaction, index) => {
          return isLegacyTransactionInstance(transactions[index]) ? Transaction.from(import_bs58.default.decode(signedTransaction)) : VersionedTransaction.deserialize(import_bs58.default.decode(signedTransaction));
        });
      } catch (e) {
        throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || "Failed to sign transactions");
      }
    });
  }
  signAndSendTransaction(transaction, options) {
    var _a;
    return __awaiter2(this, void 0, void 0, function* () {
      if (!this.connected || !this.publicKey) {
        throw new Error("Wallet not connected");
      }
      try {
        const serializedTransaction = serializeTransaction(transaction);
        const { signature } = yield this._sendIframeMessage({
          method: "signAndSendTransaction",
          params: {
            transaction: import_bs58.default.encode(serializedTransaction),
            options
          }
        });
        return signature;
      } catch (e) {
        throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || "Failed to sign and send transaction");
      }
    });
  }
  signMessage(data, display = "utf8") {
    var _a;
    return __awaiter2(this, void 0, void 0, function* () {
      if (!this.connected || !this.publicKey) {
        throw new Error("Wallet not connected");
      }
      try {
        const { signature } = yield this._sendIframeMessage({
          method: "signMessage",
          params: {
            data: import_bs58.default.encode(data),
            display
          }
        });
        return Uint8Array.from(import_bs58.default.decode(signature));
      } catch (e) {
        throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || "Failed to sign message");
      }
    });
  }
  sign(data, display = "utf8") {
    return __awaiter2(this, void 0, void 0, function* () {
      return yield this.signMessage(data, display);
    });
  }
  static isSupported() {
    return __awaiter2(this, void 0, void 0, function* () {
      const provider = yield detectProvider();
      return !!provider;
    });
  }
  standardSignAndSendTransaction(...inputs) {
    return __awaiter2(this, void 0, void 0, function* () {
      if (!this.connected)
        throw new Error("not connected");
      const outputs = [];
      if (inputs.length === 1) {
        const { transaction, account, chain, options } = inputs[0];
        const { minContextSlot, preflightCommitment, skipPreflight, maxRetries } = options || {};
        if (account !== this._account)
          throw new Error("invalid account");
        if (!isSolanaChain(chain))
          throw new Error("invalid chain");
        const signature = yield this.signAndSendTransaction(VersionedTransaction.deserialize(transaction), {
          preflightCommitment,
          minContextSlot,
          maxRetries,
          skipPreflight
        });
        outputs.push({ signature: import_bs58.default.decode(signature) });
      } else if (inputs.length > 1) {
        for (const input of inputs) {
          outputs.push(...yield this.standardSignAndSendTransaction(input));
        }
      }
      return outputs;
    });
  }
  standardSignTransaction(...inputs) {
    return __awaiter2(this, void 0, void 0, function* () {
      if (!this.connected)
        throw new Error("not connected");
      const outputs = [];
      if (inputs.length === 1) {
        const { transaction, account, chain } = inputs[0];
        if (account !== this._account)
          throw new Error("invalid account");
        if (chain && !isSolanaChain(chain))
          throw new Error("invalid chain");
        const signedTransaction = yield this.signTransaction(VersionedTransaction.deserialize(transaction));
        outputs.push({ signedTransaction: signedTransaction.serialize() });
      } else if (inputs.length > 1) {
        let chain;
        for (const input of inputs) {
          if (input.account !== this._account)
            throw new Error("invalid account");
          if (input.chain) {
            if (!isSolanaChain(input.chain))
              throw new Error("invalid chain");
            if (chain) {
              if (input.chain !== chain)
                throw new Error("conflicting chain");
            } else {
              chain = input.chain;
            }
          }
        }
        const transactions = inputs.map(({ transaction }) => VersionedTransaction.deserialize(transaction));
        const signedTransactions = yield this.signAllTransactions(transactions);
        outputs.push(...signedTransactions.map((signedTransaction) => ({
          signedTransaction: signedTransaction.serialize()
        })));
      }
      return outputs;
    });
  }
  standardSignMessage(...inputs) {
    return __awaiter2(this, void 0, void 0, function* () {
      if (!this.connected)
        throw new Error("not connected");
      const outputs = [];
      if (inputs.length === 1) {
        const { message, account } = inputs[0];
        if (account !== this._account)
          throw new Error("invalid account");
        const signature = yield this.signMessage(message);
        outputs.push({ signedMessage: message, signature });
      } else if (inputs.length > 1) {
        for (const input of inputs) {
          outputs.push(...yield this.standardSignMessage(input));
        }
      }
      return outputs;
    });
  }
};
SolflareMetaMask.IFRAME_URL = "https://widget.solflare.com/";
var esm_default = SolflareMetaMask;
export {
  StandardSolflareMetaMaskWalletAccount,
  esm_default as default
};
//# sourceMappingURL=esm-MKQYQHTT.js.map
